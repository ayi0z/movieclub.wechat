$(function(){
  let pgm = {
    $container: $('#container'),
    /**
     * page:{
     *  name:'about',
     *  url: '',
     *  html:'',
     *  hash: '#xxxx'
     * }
     */
    _pages: [], // 可用页列表
    _defaultPage: null, // 默认页面
    // _pageStack:[],  // 浏览器前进，后退
    // _pageIndex: 1,  // 页面索引
    setDefaultPage: function(defaultPage) {
      // this._defaultPage = this._find('name', defaultPage);
      this._push(defaultPage);
      this._defaultPage = defaultPage;
      return this;
    },
    init: function(){
      let self = this;
      /**
       * 监听 hashchange 事件，
       * 如果url地址栏#后到hash参数变化，则跳转hash对应的page
       */
      $(window).on('hashchange', function(){
        let hash  = location.hash.indexOf('#')===0 ? location.hash : '#';
        let page = self._find('hash', hash) || self._defaultPage;
        self._go(page);
      });

      let hash  = location.hash.indexOf('#')===0 ? location.hash : '#';
      let page = self._find('hash', hash) || self._defaultPage;
      this._go(page);
      return this;
    },
    _push: function(page){
      this._pages.push(page);
    },
    push: function(url, html){
      n = url.substr(url.lastIndexOf('/')+1);
      page = {
        name: n,
        url: url,
        html: html,
        hash: '#'+n
      };
      this._push(page);
      return this;
    },
    _find: function(key, value){
      let page = null;
      for (var i = 0, len = this._pages.length; i < len; i++) {
        if (this._pages[i][key] === value) {
            page = this._pages[i];
            break;
        }
      }
      return page;
    },
    go: function(to_url){
      if(!to_url || !(to_url = to_url.trim())) return;
      let self = this;
      /**
       * 跳转到指定页面
       * 1，如果页面find到，则加载
       * 2，如果页面没有 find 到，则fetch请求api后，加入pages里，然后加载 
       */ 
      let page = self._find('url', to_url);
      if(!page){
        console.log('pgm go:',to_url)
        // 如果没有find到page，则fetch请求服务器读取
        fetch(to_url)
          .then(res => ( res.text()))
          .then(body=>{
              self.push(to_url, body)._go(page);
              console.log('fetch:', to_url)
              return self
          });
      } else {
        self._go(page);
        return self;
      }
    },
    _go: function(page){
      let html = $(page.html);
      let $html = $(html).addClass('slideIn');//.addClass(page.name);
      $html.on('animationend webkitAnimationEnd', function(){
        $html.removeClass('slideIn').addClass('showing');
      });
      this.$container.html('')
      // this.$container.append($html);
      // this.$container.html($html.html());
    },
    run: fun => (fun())
  }

  function init(){
    pgm.setDefaultPage({
      name: '#home',
      url: location.href,
      html: $('#container').html(),
      hash: '#home'
    }).init();
    window.pgm = pgm;
  }
  // init();
});
